{"componentChunkName":"component---src-templates-lesson-template-js","path":"/docker","webpackCompilationHash":"aa3d24a872528a9552d5","result":{"data":{"markdownRemark":{"html":"<p>This is probably why you're here: Docker. Docker is a commandline tool that made creating, updating packaging, distributing, and running containers significantly easier which in turns allowed them become very popular with not just system administraters but the programming populace at large. At its heart, it's a command line very similar to <code class=\"language-text\">lxc</code> that allows you to manage your containers but in a much more convenient way. Let's dive into the core concepts of Docker.</p>\n<h2 id=\"docker-desktop\"><a href=\"#docker-desktop\" aria-label=\"docker desktop permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Desktop</h2>\n<p>Go ahead and install <a href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop</a> right now. It will work for both Mac and Windows. Docker Desktop runs the Docker <a href=\"https://en.wikipedia.org/wiki/Daemon_(computing)\">daemon</a> (daemon just means a program that runs in the background all the time) so that we can download, run, and build containers. If you're on Mac, you'll see a cute little whale icon in your status bar. Feel free to poke around and see what it has. It will also take the liberty of installing the <code class=\"language-text\">docker</code> commandline tool so we can start doing all the fun things with Docker.</p>\n<h2 id=\"docker-hub\"><a href=\"#docker-hub\" aria-label=\"docker hub permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Hub</h2>\n<p><a href=\"https://hub.docker.com/search?q=&#x26;type=image\">Click here</a> to head over to Docker Hub. Docker Hub is a public registry of pre-made containers. Think of it like an npm for containers. Instead of having to handcraft everything yourself, you can start out with a base container from Docker Hub and start from there. For example, instead of having to start with Ubuntu and install Node.js on it yourself, you can just start with a container that has Node.js already on it! There's a pre-made container for just about anything you can think of, and for those you can't it's pretty easy to find a good starting point so you can make your own bespoke, artisinal containers. If you feel so inclined, you can publish your own containers on the registry so others can take advantage of your discoveries.</p>\n<p>Feel free to make an account on Docker Hub at this point. We won't be publishing anything to it during this workshop but it's a good idea to have one for when you want to!</p>\n<h2 id=\"images\"><a href=\"#images\" aria-label=\"images permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Images</h2>\n<p>These pre-made containers are called <em>images</em>. They basically dump out the state of the container, package that up, and store it so you can use it later. So let's go nab one of these image and run it! We're going to do it first without Docker to show you that you actually already knows what's going on.</p>\n<p>First thing, let's go grab a container off of Docker Hub. Let's grab the latest Node.js container that runs Ubuntu.</p>\n<h3 id=\"docker-images-without-docker\"><a href=\"#docker-images-without-docker\" aria-label=\"docker images without docker permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Images without Docker</h3>\n<h1 id=\"todo-try-this-and-fix-it\"><a href=\"#todo-try-this-and-fix-it\" aria-label=\"todo try this and fix it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TODO TRY THIS AND FIX IT</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token builtin class-name\">export</span> node -o dockercontainer.tar\n$ <span class=\"token function\">mkdir</span> rootfs\n$ <span class=\"token function\">tar</span> xf dockercontainer.tar --ignore-command-error -C rootfs/\n$ unshare --mount --uts --ipc --net --pid --fork --user --map-root-user <span class=\"token function\">chroot</span> <span class=\"token environment constant\">$PWD</span>/rootfs ash\nroot:$ <span class=\"token function\">mount</span> -t proc none /proc\nroot:$ <span class=\"token function\">mount</span> -t sysfs none /sys\nroot:$ <span class=\"token function\">mount</span> -t tmpfs none /tmp</code></pre></div>\n<p>So, this isn't totally it. Docker does a lot more for you than just this like networking, volumes, and other things but suffice to say this core of what Docker is doing for you: creating a new environment that's isolated by namespace and limited by cgroups and chroot'ing you into it. So why did we go through all this ceremony? Well, it's because I want you to understand what Docker is doing for you, know that you <em>could</em> do it by hand but since there's a tool that does for you you don't want to. I hold a strong personal belief that tools people need to understand their tools and what they do for them. Every tool you add to your environment adds complexity but should also add ease. If you don't understand the complexity the tool is solving, you resent it and don't get to fully appreciate nor take advantage of what the tool can fully offer.</p>\n<p>So how often will you do what we just did? Never. 99% of container-utilizers have no idea this is what's happening under the hood. But now that you know it will make you embrace the complexity that Docker adds because you can see why you have it.</p>\n<h3 id=\"docker-images-with-docker\"><a href=\"#docker-images-with-docker\" aria-label=\"docker images with docker permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Images with Docker</h3>\n<p>So it's much easier to do what we did with Docker. Run this command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --interactive --tty run ubuntu <span class=\"token comment\"># or, to be shorter: docker run -it ubuntu</span></code></pre></div>\n<p>A bit easier to remember, right? This will drop you into a Ubuntu bash shell inside of a container as the root user of that container. When you're done, just run <code class=\"language-text\">exit</code> or hit CTRL+D. Notice that this will grab the <a href=\"https://hub.docker.com/_/ubuntu\">ubuntu</a> image from Docker for you and run it. The <code class=\"language-text\">run</code> part of the command is telling Docker you're going to be executing a container (as opposed to building it.) The <code class=\"language-text\">-it</code> part says you want to be dropped into the container interactively so you can run commands and inspect the container. By default containers run and then exit as soon as they're done. Go ahead and try <code class=\"language-text\">docker run ubuntu</code>. It'll look it did nothing but it actually starts the container and then, because it has nothing defined for it to do, it just exits.</p>\n<p>So what if you wanted it to execute something? Try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run ubuntu <span class=\"token function\">ls</span></code></pre></div>\n<p>The <code class=\"language-text\">ls</code> part at the end is what you pass into the container to be run. As you can see here, it executes the command, outputs the results, and shuts down the container. This is great for running a Node.js server. Since it doesn't exit, it'll keep running until the server crashes or the server exits itself.</p>\n<p>So now what if we want to detach the container running from the foreground? Let's try that.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --detach -it ubuntu <span class=\"token comment\"># or, to be shorter: docker run -dit ubuntu</span></code></pre></div>\n<p>So it prints a long hash out and then nothing. Oh no! What happened to it!? Well, it's running in the background. So how do we get ahold of it?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">ps</span></code></pre></div>\n<p>This will print out all the running containers that Docker is managing for you. You should see your container there. So copy the ID or the name and say:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker attach <span class=\"token operator\">&lt;</span>ID or name<span class=\"token operator\">></span> <span class=\"token comment\"># e.g. `docker attach 20919c49d6e5` would attach to that container</span></code></pre></div>\n<p>This allows you to attach a shell to a running container and mess around with it. Useful if you need to inspect something or see running logs. Feel free to type <code class=\"language-text\">exit</code> to get out of here. Run <code class=\"language-text\">docker run -dit ubuntu</code> one more time. Let's kill this container without attaching to it. Run <code class=\"language-text\">docker ps</code>, get the IDs or names of the containers you want to kill and say:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">kill</span> <span class=\"token operator\">&lt;</span>IDs or names of containers<span class=\"token operator\">></span> <span class=\"token comment\"># e.g. `docker kill fae0f0974d3d 803e1721dad3 20919c49d6e5` would kill those three containers</span></code></pre></div>\n<p>A fun way to kill all runnung containers would be</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">kill</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -q<span class=\"token variable\">)</span></span></code></pre></div>\n<p>The <code class=\"language-text\">$()</code> portion of that will evaluate whatever is inside of that first and plug its output into the second command. In this case, <code class=\"language-text\">docker ps -q</code> returns all the IDs and nothing else. These are then passed to <code class=\"language-text\">docker kill</code> which will kill all those IDs. Neat!</p>\n<p>So now what if we wanted to run a container that Node in it? The default Ubuntu container doesn't have Node.js installed. Let's use a different container!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -it node</code></pre></div>\n<p>Notice this drops us into the Node.js REPL which may or may not be what you want. What if we wanted to be dropped into bash of that container? Easy! You already know how!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -it node <span class=\"token function\">bash</span></code></pre></div>\n<p>Remember, after we identify the container (<a href=\"https://hub.docker.com/_/node/\">node</a>), anything we put after get's evaluated instead of the default command identified by the container (in the container <code class=\"language-text\">node</code>'s case, it runs the command <code class=\"language-text\">node</code> by default). This allows us to run whatever command we want! In this case, we're exectuing <code class=\"language-text\">bash</code> which puts us directly into a bash shell.</p>\n<p>So what flavor of Linux is the <code class=\"language-text\">node</code> image running? Honestly, I didn't even remember when I was writing this. But it's easy to find out! There's a file on every* Linux OS that has in it what sort of Linux it's running. If we run <code class=\"language-text\">cat /etc/issue</code> it'll show us what sort of Linux it is. <code class=\"language-text\">cat</code> is a way to output a file's contents to the terminal. Try running the two commands</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run ubuntu <span class=\"token function\">cat</span> /etc/issue <span class=\"token comment\"># hopefully this shouldn't surprise you</span>\ndocker run node <span class=\"token function\">cat</span> /etc/issue <span class=\"token comment\"># ????</span></code></pre></div>\n<p>We'll get into later how to select which Linux distros you should use but for now this is just a fun exercise.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-label=\"tags permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tags</h2>\n<p>So far we've just been running containers with no tags which is implicitly using the <code class=\"language-text\">latest</code> tag. When you say <code class=\"language-text\">docker run -it node</code>, it's the same as saying <code class=\"language-text\">docker run -it node:latest</code>. The <code class=\"language-text\">:latest</code> is the tag. This allows you to run different versions of the same container, just like you can install React version 15 or React version 16: some times you don't want the latest. Let's say you have a legacy application at your job and it depends on running on Node.js 8 (update your app, Node.js is already past end-of-life) then you can say</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -it node:8 <span class=\"token function\">bash</span></code></pre></div>\n<p>Once in the shell, run <code class=\"language-text\">node --version</code> and you'll see the Node.js version is 8.<em>.</em>! Neat! This is helpful because now we can fix our Node.js version to the one our app expects. Hop back over to <a href=\"https://hub.docker.com/_/node/\">the Docker Hub page for the node container</a>. Take a look at all the version of the node container you can download. Let's try another one.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run node:alpine <span class=\"token function\">cat</span> /etc/issue</code></pre></div>\n<p>You'll see this is running an entirely different OS all together: Alpine! <a href=\"https://www.alpinelinux.org/\">Alpine Linux</a> is a very, very tiny distro of Linux made for containers and specifically because it is tiny. Alpine containers are bare bones: if you want <em>anything</em> in them, you're going to have to do it yourself. This is in opposition to the Ubuntu and Debian containers: they ship the kitchen sink with them which is both convenient and much bigger in size. Alpine images are about five megabytes whereas Ubuntu is close to two hundred megabytes. As you can imagine, this can make a difference in how fast you can deploy and can cost significantly less in terms of storage and network traffic. It's also in general better to have less unnecessary things in your containers: less is more in terms of security. If an attacker tries to execute a Python exploit on your container but your container doesn't have Python then their attack won't work.</p>\n<p>We'll get more into how to ship containers to production but I'll leave you with this pro-tip: have a development container which has all the bells, whistles, debugging tools, etc. that you need. Then have a production container that's minimalist as possibly can be. You'll get the best of both worlds.</p>\n<h2 id=\"cli\"><a href=\"#cli\" aria-label=\"cli permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI</h2>\n<p>Let's take a look at some more cool features of the Docker CLI.</p>\n<h3 id=\"pull--push\"><a href=\"#pull--push\" aria-label=\"pull  push permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pull / push</h3>\n<p><code class=\"language-text\">pull</code> allows you to pre-fetch container to run. P</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker pull jturpin/hollywood\ndocker run -it jturpin/hollywood hollywood <span class=\"token comment\"># notice it's already loaded and cached here; it doesn't redownload it</span></code></pre></div>\n<p>That will pull the hollywood container from the user jturpin's user account. The second line will execute this fun container which is just meant to look a hacker's screen in a movie (it doesn't really do anything than look cool.)</p>\n<p><code class=\"language-text\">push</code> allows you to push containers to whatever registry you're connected to (probably normally Docker Hub or something like Azure Container Registry).</p>\n<h3 id=\"inspect\"><a href=\"#inspect\" aria-label=\"inspect permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inspect</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker inspect node</code></pre></div>\n<p>This will dump out a lot of info about the container. Helpful when figuring out what's going on with a container</p>\n<h3 id=\"pause--unpause\"><a href=\"#pause--unpause\" aria-label=\"pause  unpause permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pause / unpause</h3>\n<p>As it looks, these pauses or unpause all the processes in a container. Feel free to try</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -dit jturpin/hollywood hollywood\ndocker <span class=\"token function\">ps</span> <span class=\"token comment\"># see container running</span>\ndocker pause <span class=\"token operator\">&lt;</span>ID or name<span class=\"token operator\">></span>\ndocker <span class=\"token function\">ps</span> <span class=\"token comment\"># see container paused</span>\ndocker unpause <span class=\"token operator\">&lt;</span>ID or name<span class=\"token operator\">></span>\ndocker <span class=\"token function\">ps</span> <span class=\"token comment\"># see container running again</span>\ndocker <span class=\"token function\">kill</span> <span class=\"token operator\">&lt;</span>ID or name<span class=\"token operator\">></span> <span class=\"token comment\"># see container is gone</span></code></pre></div>\n<h3 id=\"exec\"><a href=\"#exec\" aria-label=\"exec permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exec</h3>\n<p>This allows you to execute a command against a running container. This is different from <code class=\"language-text\">docker run</code> because <code class=\"language-text\">docker run</code> will start a new container whereas <code class=\"language-text\">docker exec</code> runs the command in an already-running container.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -dit jturpin/hollywood hollywood\ndocker <span class=\"token function\">ps</span> <span class=\"token comment\"># grab the name or ID</span>\ndocker <span class=\"token builtin class-name\">exec</span> <span class=\"token operator\">&lt;</span>ID or name<span class=\"token operator\">></span> <span class=\"token function\">ps</span> aux <span class=\"token comment\"># see it output all the running processes of the container</span></code></pre></div>\n<p>If you haven't seen <code class=\"language-text\">ps aux</code> before, it's a really useful way to see what's running on your computer. Try running <code class=\"language-text\">ps aux</code> on your macOS or Linux computer to see everything running.</p>\n<h3 id=\"import--export\"><a href=\"#import--export\" aria-label=\"import  export permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>import / export</h3>\n<p>Allows you to dump out your container to a tar ball (which we did above.) You can also import a tar ball as well.</p>\n<h3 id=\"history\"><a href=\"#history\" aria-label=\"history permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>history</h3>\n<p>We'll get into layers in a bit but this allow you to see how this Docker image's layer composition has changed over time and how recently.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">history</span> node</code></pre></div>\n<h3 id=\"info\"><a href=\"#info\" aria-label=\"info permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>info</h3>\n<p>Dumps a bunch of info about the host system. Useful if you're on a VM somewhere and not sure what the environment is.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker info</code></pre></div>\n<h3 id=\"top\"><a href=\"#top\" aria-label=\"top permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>top</h3>\n<p>Allows you to see processes running on a container (similar to what we did above)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run mongo\ndocker <span class=\"token function\">top</span> <span class=\"token operator\">&lt;</span>ID outputted by previous command<span class=\"token operator\">></span> <span class=\"token comment\"># you should see MongoDB running</span></code></pre></div>\n<h3 id=\"rm--rmi\"><a href=\"#rm--rmi\" aria-label=\"rm  rmi permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rm / rmi</h3>\n<p>If you run <code class=\"language-text\">docker ps --all</code> it'll show all containers you've stopped running in addition to the runs you're running. If you want to remove something from this list, you can do <code class=\"language-text\">docker rm &lt;id or name&gt;</code>.</p>\n<p>If you want to remove an image from your computer (to save space or whatever) you can run <code class=\"language-text\">docker rmi mongo</code> and it'll delete the image from your computer. This isn't a big deal since you can always reload it again</p>\n<h3 id=\"logs\"><a href=\"#logs\" aria-label=\"logs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logs</h3>\n<p>Very useful to see the output of one of your running containers.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -d mongo\ndocker logs <span class=\"token operator\">&lt;</span>id from previous command<span class=\"token operator\">></span> <span class=\"token comment\"># see all the logs</span></code></pre></div>\n<h3 id=\"restart\"><a href=\"#restart\" aria-label=\"restart permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>restart</h3>\n<p>Pretty self explanatory. Will restart a running container</p>\n<h3 id=\"search\"><a href=\"#search\" aria-label=\"search permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>search</h3>\n<p>If you want to see if a container exists on Docker Hub (or whatever registry you're connected to), this will allow you to take a look.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker search python <span class=\"token comment\"># see all the various flavors of Python containers you can run</span>\ndocker search node <span class=\"token comment\"># see all the various flavors of Node.js containers you can run</span></code></pre></div>","frontmatter":{"path":"/docker","title":"Intro to Docker","order":2}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":1,"path":"/what-are-containers","title":"What Are Containers?"}}},{"node":{"frontmatter":{"order":2,"path":"/docker","title":"Intro to Docker"}}},{"node":{"frontmatter":{"order":2,"path":"/lxc-lxd","title":"lxc & lxd"}}},{"node":{"frontmatter":{"order":3,"path":"/dockerfile","title":"The Dockerfile"}}},{"node":{"frontmatter":{"order":4,"path":"/going-to-production","title":"Going to Production"}}},{"node":{"frontmatter":{"order":5,"path":"/static-assets-project","title":"Static Assets Project"}}},{"node":{"frontmatter":{"order":6,"path":"/volumes-and-bind-mounts","title":"Volumes and Bind Mounts"}}},{"node":{"frontmatter":{"order":7,"path":"/dev-containers","title":"Using Containers for your Dev Environment"}}},{"node":{"frontmatter":{"order":8,"path":"/networking","title":"Networking with Docker"}}},{"node":{"frontmatter":{"order":9,"path":"/docker-compose","title":"Docker Compose"}}},{"node":{"frontmatter":{"order":10,"path":"/buildah-podman","title":"Non-Docker Containers: Buildah and Podman"}}},{"node":{"frontmatter":{"order":11,"path":"/kubernetes","title":"Kubernetes"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}